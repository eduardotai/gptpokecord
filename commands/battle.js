const { SlashCommandBuilder, EmbedBuilder, ActionRowBuilder, ButtonBuilder, ButtonStyle } = require('discord.js');
const { getPlayer, getPlayerPokemon } = require('../systems/database');
const battleSystem = require('../systems/battleSystem');
const spawnSystem = require('../systems/spawnSystem');
const { getPokemon } = require('../systems/pokemonData');
const { defer, replyError } = require('../utils/replies');

module.exports = {
    data: new SlashCommandBuilder()
        .setName('battle')
        .setDescription('Inicia uma batalha Pok√©mon')
        .addStringOption(option =>
            option.setName('pokemon')
                .setDescription('Nome ou ID do Pok√©mon para usar na batalha')
                .setRequired(false)),

    async execute(interaction) {
        await defer(interaction, false);

        const userId = interaction.user.id;
        const pokemonName = interaction.options.getString('pokemon');

        try {
            // Verificar se o jogador existe
            const player = await getPlayer(userId);
            
            if (!player) {
                return await replyError(interaction, { description: 'Voc√™ ainda n√£o come√ßou sua jornada Pok√©mon. Use `/start` para come√ßar!' });
            }

            // Obter Pok√©mon do jogador
            const playerPokemon = await getPlayerPokemon(userId);
            
            if (playerPokemon.length === 0) {
                return await replyError(interaction, { description: 'Voc√™ precisa ter pelo menos um Pok√©mon para batalhar. Use `/start` para come√ßar!' });
            }

            // Escolher Pok√©mon para batalha
            let selectedPokemon;
            if (pokemonName) {
                // Buscar por nome ou ID
                selectedPokemon = playerPokemon.find(p => {
                    const basePokemon = getPokemon(p.pokemon_id);
                    return p.nickname?.toLowerCase() === pokemonName.toLowerCase() ||
                           basePokemon.name.toLowerCase() === pokemonName.toLowerCase() ||
                           p.pokemon_id.toString() === pokemonName;
                });

                if (!selectedPokemon) {
                    return await replyError(interaction, { description: `Voc√™ n√£o tem um Pok√©mon chamado "${pokemonName}". Use \`/pokemon\` para ver seus Pok√©mon.` });
                }
            } else {
                // Usar o primeiro Pok√©mon dispon√≠vel
                selectedPokemon = playerPokemon.find(p => p.hp > 0) || playerPokemon[0];
            }

            // Verificar se o Pok√©mon est√° desmaiado
            if (selectedPokemon.hp <= 0) {
                const fallbackName = selectedPokemon.nickname || (getPokemon(selectedPokemon.pokemon_id)?.name || 'Pok√©mon');
                return await replyError(interaction, { description: `${fallbackName} est√° desmaiado e n√£o pode batalhar. Use \`/heal\` para cur√°-lo.` });
            }

            // Gerar ID √∫nico para a batalha
            const battleId = `${userId}_${Date.now()}`;

            // Verificar batalha ativa existente para o usu√°rio
            let battle = battleSystem.getActiveBattleForUser(userId);
            if (!battle) {
                // Exigir spawn ativo no canal para iniciar nova batalha
                const channelId = interaction.channelId;
                const spawn = spawnSystem.getSpawn(channelId);
                if (!spawn) {
                    const embed = new EmbedBuilder()
                        .setColor('#ff6b6b')
                        .setTitle('‚ùå Nenhum encontro dispon√≠vel!')
                        .setDescription('N√£o h√° Pok√©mon spawnado neste canal no momento. Aguarde um spawn e use o bot√£o "Batalhar" ou rode este comando logo ap√≥s o spawn.')
                        .setTimestamp();
                    return await interaction.editReply({ embeds: [embed] });
                }
                const presetOpponent = spawn.opponent;
                spawnSystem.consumeSpawn(channelId);
                battle = await battleSystem.startBattle(userId, battleId, 'wild', presetOpponent);
            }
            // Se o Pok√©mon selecionado est√° desmaiado, impedir sele√ß√£o
            if (selectedPokemon.hp <= 0) {
                const embed = new EmbedBuilder()
                    .setColor('#ff6b6b')
                    .setTitle('üíÄ Pok√©mon desmaiado!')
                    .setDescription('Este Pok√©mon est√° desmaiado. Use `/heal` com Revive para ressuscit√°-lo.')
                    .setTimestamp();
                return await interaction.editReply({ embeds: [embed] });
            }

            // Selecionar Pok√©mon para a batalha ativa
            await battleSystem.selectPokemon(battle.id, selectedPokemon);

            // Obter status da batalha
            const current = battleSystem.getBattle(battle.id);
            const battleStatus = battleSystem.formatBattleStatus(current);
            const basePokemon = getPokemon(selectedPokemon.pokemon_id);
            const baseName = selectedPokemon.nickname || basePokemon?.name || 'Pok√©mon';
            const baseTypes = Array.isArray(basePokemon?.types) ? basePokemon.types : [];
            const oppTypes = Array.isArray(current?.opponent?.types) ? current.opponent.types : [];
            const activeBattleId = current?.id || battle.id;

            // Garantir que os movimentos do Pok√©mon selecionado sejam um array
            let selectedMoves;
            try {
                selectedMoves = Array.isArray(selectedPokemon.moves) ? selectedPokemon.moves : JSON.parse(selectedPokemon.moves);
            } catch (_) {
                selectedMoves = [];
            }
            if (!Array.isArray(selectedMoves)) selectedMoves = [];

            // Criar embed da batalha
            const embed = new EmbedBuilder()
                .setColor('#ff6b6b')
                .setTitle('‚öîÔ∏è Batalha Pok√©mon iniciada!')
                .setDescription(`**${player.username}** vs **${current.opponent.name}**`)
                .addFields(
                    { 
                        name: 'üéØ Seu Pok√©mon', 
                        value: `**${baseName}** (Nv.${selectedPokemon.level})\nHP: ${selectedPokemon.hp}/${selectedPokemon.max_hp}\nTipos: ${baseTypes.length ? baseTypes.join(', ') : 'Desconhecido'}`, 
                        inline: true 
                    },
                    { 
                        name: 'üëπ Oponente', 
                        value: `**${current.opponent.name}** (Nv.${current.opponent.level})\nHP: ${current.opponent.currentHp}/${current.opponent.maxHp}\nTipos: ${oppTypes.length ? oppTypes.join(', ') : 'Desconhecido'}`, 
                        inline: true 
                    }
                )
                .addFields({
                    name: '‚ö° Movimentos dispon√≠veis',
                    value: selectedMoves.length > 0 ? selectedMoves.map(move => `‚Ä¢ **${move}**`).join('\n') : 'Nenhum movimento dispon√≠vel',
                    inline: false
                })
                .setThumbnail(interaction.user.displayAvatarURL())
                .setTimestamp()
                .setFooter({ text: 'Use os bot√µes abaixo para batalhar!' });

            // Criar bot√µes de a√ß√£o
            const actionRow = new ActionRowBuilder()
                .addComponents(
                    new ButtonBuilder()
                        .setCustomId(`attack_${activeBattleId}`)
                        .setLabel('‚öîÔ∏è Atacar')
                        .setStyle(ButtonStyle.Danger),
                    new ButtonBuilder()
                        .setCustomId(`catch_${activeBattleId}`)
                        .setLabel('üéæ Capturar')
                        .setStyle(ButtonStyle.Primary),
                    new ButtonBuilder()
                        .setCustomId(`item_${activeBattleId}`)
                        .setLabel('üíä Usar Item')
                        .setStyle(ButtonStyle.Secondary),
                    new ButtonBuilder()
                        .setCustomId(`flee_${activeBattleId}`)
                        .setLabel('üèÉ Fugir')
                        .setStyle(ButtonStyle.Secondary)
                );

            const sent = await interaction.editReply({ 
                embeds: [embed],
                components: [actionRow]
            });

        } catch (error) {
            console.error('Erro ao iniciar batalha:', error);
            await replyError(interaction, { description: 'Houve um erro ao iniciar a batalha. Tente novamente!' });
        }
    },
};
